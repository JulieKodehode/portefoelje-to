{"ast":null,"code":"var _jsxFileName = \"/Users/julie/Documents/dev/portfolios/CURRENT_portfolio_newDesign/src/components/LightDarkMode/LightDarkMode.jsx\",\n  _s = $RefreshSig$();\n// Libraries\nimport React, { useState, useEffect } from \"react\";\n\n// Styles\nimport \"../LightDarkMode/LightDarkMode.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LightDarkMode = () => {\n  _s();\n  const [theme, setTheme] = useState(localStorage.getItem(\"theme\") || \"light\");\n\n  // Toggle event that changes between light and dark mode\n  const toggleTheme = () => {\n    if (theme === \"lightMode\") {\n      setTheme(\"darkMode\");\n    } else {\n      setTheme(\"lightMode\");\n    }\n  };\n\n  // Local storage to save what color mode is selected\n  useEffect(() => {\n    localStorage.setItem(\"theme\", theme);\n    document.body.className = theme;\n  }, [theme]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"toggleButton\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleTheme,\n      children: \"Change Theme\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 3\n  }, this);\n};\n_s(LightDarkMode, \"Vu9F2wpR0BoGpAqLYPnUEv9Hug4=\");\n_c = LightDarkMode;\nexport default LightDarkMode;\nvar _c;\n$RefreshReg$(_c, \"LightDarkMode\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","LightDarkMode","_s","theme","setTheme","localStorage","getItem","toggleTheme","setItem","document","body","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/julie/Documents/dev/portfolios/CURRENT_portfolio_newDesign/src/components/LightDarkMode/LightDarkMode.jsx"],"sourcesContent":["// Libraries\nimport React, { useState, useEffect } from \"react\";\n\n// Styles\nimport \"../LightDarkMode/LightDarkMode.css\";\n\nconst LightDarkMode = () => {\n\tconst [theme, setTheme] = useState(localStorage.getItem(\"theme\") || \"light\");\n\n\t// Toggle event that changes between light and dark mode\n\tconst toggleTheme = () => {\n\t\tif (theme === \"lightMode\") {\n\t\t\tsetTheme(\"darkMode\");\n\t\t} else {\n\t\t\tsetTheme(\"lightMode\");\n\t\t}\n\t};\n\n\t// Local storage to save what color mode is selected\n\tuseEffect(() => {\n\t\tlocalStorage.setItem(\"theme\", theme);\n\t\tdocument.body.className = theme;\n\t}, [theme]);\n\n\treturn (\n\t\t<div className={\"toggleButton\"}>\n\t\t\t<button onClick={toggleTheme}>Change Theme</button>\n\t\t</div>\n\t);\n};\n\nexport default LightDarkMode;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAElD;AACA,OAAO,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAACQ,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC;;EAE5E;EACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACzB,IAAIJ,KAAK,KAAK,WAAW,EAAE;MAC1BC,QAAQ,CAAC,UAAU,CAAC;IACrB,CAAC,MAAM;MACNA,QAAQ,CAAC,WAAW,CAAC;IACtB;EACD,CAAC;;EAED;EACAN,SAAS,CAAC,MAAM;IACfO,YAAY,CAACG,OAAO,CAAC,OAAO,EAAEL,KAAK,CAAC;IACpCM,QAAQ,CAACC,IAAI,CAACC,SAAS,GAAGR,KAAK;EAChC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,oBACCH,OAAA;IAAKW,SAAS,EAAE,cAAe;IAAAC,QAAA,eAC9BZ,OAAA;MAAQa,OAAO,EAAEN,WAAY;MAAAK,QAAA,EAAC;IAAY;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAS;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC9C;AAER,CAAC;AAACf,EAAA,CAvBID,aAAa;AAAAiB,EAAA,GAAbjB,aAAa;AAyBnB,eAAeA,aAAa;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}